version: "3.3"

services:

  api:
    build:
      context: .
    image: manhtien465/backend1-api
    env_file: docker-compose.env
    environment:
      SERVICES: api
      PORT: 3000
    depends_on:
      - nats
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gw.rule=PathPrefix(`/`)"
      - "traefik.http.services.api-gw.loadbalancer.server.port=3000"
    networks:
      - internal
  user:
    build:
      context: .
    image: manhtien465/backend1-user
    env_file: docker-compose.env
    environment:
      SERVICES: user
    depends_on:
      - postgres107
      - mongo
      - nats
      - redis
    networks:
      - internal
  auth:
    build:
      context: .
    image: manhtien465/backend1-auth
    env_file: docker-compose.env
    environment:
      SERVICES: auth
    depends_on:
      - postgres107
      - mongo
      - nats
      - redis
    networks:
      - internal
  postgres107:
    image: postgres:10.5
    hostname: postgres105
    restart: always
    volumes:
      - postgres107:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - internal
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: moleculer
  pgAdmin:
    image: dpage/pgadmin4
    ports:
      - '16543:80'
    environment:
      SERVICES: pgadmin
      PGADMIN_DEFAULT_EMAIL: admin@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
    networks:
      - internal
    restart: always
  mongo:
    image: mongo:4
    volumes:
      - data:/data/db
    networks:
      - internal
  nats:
    image: nats:2
    networks:
      - internal

  redis:
    image: redis:alpine
    networks:
      - internal

  traefik:
    image: traefik:v2.1
    command:
      - "--api.insecure=true" # Don't do that in production!
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - 3000:80
      - 3001:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal
      - default
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 3030:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus:/etc/prometheus:ro ## Share "prometheus" dir with Prometheus service
    networks:
      - internal

networks:
  internal:

volumes:
  data:
  postgres107:
  
